# 📋 项目开发和文档管理规则

## 📁 文档管理规则

### 1. 文档存放位置 ⭐
**规则**：所有 Markdown 文档必须存放在 `docs/` 目录下

**目录结构**：
```
docs/
├── 游戏设计文档.md          # 游戏设计
├── 技术架构文档.md          # 技术架构
├── 功能特性列表.md          # 功能清单
├── 开发路线图.md            # 开发计划
├── 下一步优化计划.md        # 任务规划
├── 已完成功能总结.md        # 完成清单
├── 更新日志.md              # 版本历史
├── 数据持久化说明.md        # 技术文档
├── 测试/                    # 临时测试文档
│   ├── 测试敌人系统.md
│   ├── 复活和升级系统测试.md
│   └── ...
└── README.md                # 文档索引
```

**禁止**：
- ❌ 不要在项目根目录创建 MD 文档
- ❌ 不要在 src/ 目录创建文档

**例外**：
- ✅ 项目根目录只保留 `README.md` （项目入口）

---

### 2. 文档命名规范
- 使用中文名称（项目是中文游戏）
- 清晰描述文档内容
- 避免缩写和代码风格命名

**示例**：
```
✅ 好的命名：
- docs/数据持久化说明.md
- docs/敌人系统实现.md
- docs/测试/战斗系统测试.md

❌ 不好的命名：
- data-persist.md
- enemy_sys.md
- test123.md
```

---

### 3. 测试文档管理 ⭐

#### 创建规则
测试文档存放在 `docs/测试/` 子目录：
```
docs/测试/
├── 测试敌人系统.md
├── 复活和升级系统测试.md
└── 村庄系统测试.md
```

#### 清理规则 ⭐⭐⭐
**当功能完全实现后，必须删除对应的测试文档**

判断标准：
- ✅ 功能已完全实现
- ✅ 功能已测试通过
- ✅ 功能已整合到主文档（如"已完成功能总结.md"）

**流程**：
```
1. 功能开发 → 创建测试文档
2. 功能完成 → 测试验证
3. 测试通过 → 更新主文档
4. 删除测试文档 → 保持清洁
```

**示例**：
```bash
# 敌人系统已完成
rm docs/测试/测试敌人系统.md

# 在主文档中标记
docs/已完成功能总结.md
  ✅ 敌人系统 - 已完成并测试
```

---

## 🔄 代码更新规则

### 1. 必须更新旧代码 ⭐⭐⭐
**规则**：新功能必须更新相关的旧代码，不要创建重复代码

**检查清单**：
- [ ] 是否有同名文件？如有，更新而非创建新文件
- [ ] 是否有相似功能？如有，整合而非重复实现
- [ ] 是否有冲突逻辑？如有，重构统一
- [ ] 是否影响其他模块？如有，同步更新

**示例**：
```typescript
❌ 错误做法：
// 创建新文件
Player2.ts
EnemyNew.ts

✅ 正确做法：
// 更新现有文件
Player.ts  ← 添加新功能
Enemy.ts   ← 优化现有功能
```

---

### 2. 必须更新旧文档 ⭐⭐⭐
**规则**：代码变更必须同步更新相关文档

**需要更新的文档**：
1. **docs/已完成功能总结.md** - 标记新完成的功能
2. **docs/下一步优化计划.md** - 标记任务完成状态
3. **docs/技术架构文档.md** - 更新架构变更
4. **docs/更新日志.md** - 记录版本变更

**更新模板**：
```markdown
## 功能名称
- ✅ 已实现
- 📅 完成日期：2025-XX-XX
- 📝 说明：...
- 📂 相关文件：
  - src/xxx/xxx.ts
  - docs/xxx.md
```

---

### 3. 版本控制
每次重大更新必须：
1. 更新 `docs/更新日志.md`
2. 更新 `package.json` 版本号
3. 提交前检查文档完整性

---

## 📝 开发工作流

### 标准流程
```
1. 接收任务
   ↓
2. 检查是否有旧代码/文档需要更新
   ↓
3. 更新/创建代码
   ↓
4. 更新相关文档
   ↓
5. 创建测试文档（如需要）
   ↓
6. 测试验证
   ↓
7. 删除测试文档（功能完成后）
   ↓
8. 提交代码
```

### 文档更新检查清单
在完成任何功能后，检查以下文档是否需要更新：
- [ ] docs/已完成功能总结.md
- [ ] docs/下一步优化计划.md
- [ ] docs/更新日志.md
- [ ] docs/README.md（文档索引）
- [ ] 删除已完成功能的测试文档

---

## 🗂️ 文档分类

### 1. 永久文档（不删除）
- 游戏设计文档.md
- 技术架构文档.md
- 功能特性列表.md
- 开发路线图.md
- 已完成功能总结.md
- 下一步优化计划.md
- 更新日志.md

### 2. 技术文档（长期保留）
- 数据持久化说明.md
- 村庄系统说明.md
- API文档.md

### 3. 临时测试文档（完成后删除）⭐
存放在 `docs/测试/`，功能完成后必须删除：
- 测试敌人系统.md → 删除（敌人系统已完成）
- 复活和升级系统测试.md → 删除（升级系统已完成）
- 战斗系统测试.md → 删除（战斗完成后）

---

## 🧹 定期清理

### 每周检查
- [ ] 根目录是否有多余的 MD 文档？→ 移到 docs/
- [ ] docs/测试/ 是否有已完成功能的测试文档？→ 删除
- [ ] 是否有重复或冲突的文档？→ 合并

### 提交前检查
```bash
# 检查根目录是否有MD文档（除了README.md）
ls *.md | grep -v README.md

# 如果有输出，移动到docs/
mv xxx.md docs/

# 检查是否有过期的测试文档
ls docs/测试/
```

---

## ⚠️ 重要原则

### 1. 一个功能，一个文档
不要为同一个功能创建多个文档

### 2. 及时更新，及时删除
- 代码变了 → 文档要更新
- 功能完成 → 测试文档要删除

### 3. 保持文档目录清洁
- 所有文档在 docs/
- 临时文档在 docs/测试/
- 完成即删除

### 4. 文档即代码
- 文档和代码同等重要
- 文档过期等于技术债务
- 及时更新是最佳实践

---

## 📋 示例场景

### 场景1：添加新功能
```
任务：添加技能系统

1. 创建代码：
   src/game/systems/SkillSystem.ts

2. 创建测试文档：
   docs/测试/技能系统测试.md

3. 更新主文档：
   docs/下一步优化计划.md ← 标记开始
   docs/已完成功能总结.md ← 标记完成

4. 功能完成后：
   删除 docs/测试/技能系统测试.md
   更新 docs/更新日志.md
```

### 场景2：修复Bug
```
任务：修复战斗系统Bug

1. 更新代码：
   src/game/systems/CombatSystem.ts ← 修复

2. 更新文档：
   docs/更新日志.md ← 记录修复
   docs/已完成功能总结.md ← 更新说明

3. 不需要创建测试文档（Bug修复）
```

### 场景3：重构代码
```
任务：重构敌人AI

1. 更新代码：
   src/game/entities/Enemy.ts ← 重构

2. 更新文档：
   docs/技术架构文档.md ← 更新架构
   docs/更新日志.md ← 记录重构

3. 删除过期文档：
   删除 docs/测试/旧的敌人AI测试.md
```

---

## ✅ 执行清单

开发任何功能时，遵循此清单：

### 开始前
- [ ] 检查是否有旧代码需要更新
- [ ] 检查是否有旧文档需要更新
- [ ] 确认文档存放位置（docs/）

### 开发中
- [ ] 更新/创建代码
- [ ] 同步更新相关文档
- [ ] 必要时创建测试文档（docs/测试/）

### 完成后
- [ ] 更新主文档（已完成、计划、日志）
- [ ] 删除测试文档（如功能完成）
- [ ] 清理根目录多余文档
- [ ] 提交前检查文档完整性

---

## 🎯 目标

**保持项目文档：**
- 📁 结构清晰（都在docs/）
- 🔄 实时更新（代码变文档变）
- 🗑️ 及时清理（完成即删除）
- 📚 易于维护（规范统一）

---

**遵守这些规则，让项目文档和代码一样优雅！** 📝✨
