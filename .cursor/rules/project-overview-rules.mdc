# 🎯 遗忘的像素魔法大陆 - 项目全局规则

> Windsurf AI 全局项目规则 - 开发必读

**项目状态**: ✅ v0.4.0 | 像素化UI + 大地图系统完成 | 🚀 持续开发中  
**更新时间**: 2025-10-21

---

## 📋 项目概览

### 🎮 核心理念

**游戏核心**：
- 不是"打怪升级"，而是"唤醒世界"
- 不是"拯救公主"，而是"找回自己"
- 不是"战胜邪恶"，而是"理解遗憾"

**技术核心**：
- **技术栈**: Vite + Phaser 3 + React + TypeScript
- **渲染**: 像素完美（pixelArt: true）
- **架构**: 模块化低耦合设计
- **性能**: 对象池、视野剔除、Canvas优化

### 🌟 5大创新点

1. 🌫️ **智能迷雾AI** - 会学习玩家行为
2. ⚗️ **魔法融合系统** - 不同元素组合新效果
3. 🏘️ **动态村庄** - 随玩家推进而繁荣
4. 📜 **可玩记忆片段** - 故事通过玩法呈现
5. 🌱 **生态恢复** - 净化后世界真正改变

---

## 📊 当前项目状态

### ✅ 已完成功能（v0.4.0）

#### 核心系统（100%）
- ✅ 项目架构（Vite + Phaser + React）
- ✅ TypeScript类型系统
- ✅ 状态管理（Zustand）
- ✅ 场景管理（Boot/Menu/Game/UI）
- ✅ 存档系统（LocalStorage）

#### 游戏系统
- ✅ **玩家系统**（100%）- WASD移动、攻击、技能、Chibi风格角色
- ✅ **敌人系统**（100%）- 史莱姆、骷髅、哥布林、8方向、Chibi风格
- ✅ **战斗系统**（100%）- 伤害、经验、头顶升级提示
- ✅ **复活系统**（100%）- 复活点、死亡惩罚、传送
- ✅ **村庄系统v2**（100%）- 泉水回血、多村庄、传送
- ✅ **迷雾系统**（80%）- 基础迷雾效果
- ✅ **等级成长系统**（100%）⭐⭐ - 属性分配、成长历史、权重系统
- ✅ **大地图系统**（100%）⭐⭐⭐ - 10倍地图、分块加载、生物群系

#### UI系统（90%）
- ✅ **像素风格HUD**（100%）⭐⭐ - 方形边框、monospace字体、黑色阴影
- ✅ **升级提示**（100%）⭐ - 头顶飘字、粒子特效
- ✅ **属性分配面板**（100%）⭐⭐ - 像素风格、3选1系统
- ✅ 背包系统（5x5网格）
- ✅ **地图系统**（100%）⭐⭐ - Canvas渲染、缩放拖拽、敌人显示
- ✅ **性能监控**（100%）⭐ - FPS、Chunks、敌人数量（F3切换）
- ✅ **加载进度**（100%）- 像素风格进度条
- ⏳ 技能树（0%）
- ⏳ 任务日志（0%）

#### 角色资源（100%）⭐⭐⭐
- ✅ **Chibi英雄**（8方向）- 头大腿短可爱风格
- ✅ **史莱姆**（8方向）- Chibi风格
- ✅ **骷髅战士**（8方向）- Chibi风格敌人
- ✅ **哥布林战士**（8方向）- Chibi风格敌人
- ✅ 所有角色32x32像素艺术

### 🚀 下一步计划

#### 短期（1-2周）
- [ ] 优化生物群系系统（更多地形类型）
- [ ] 完善ChunkManager（程序生成地形）
- [ ] 敌人AI增强（根据生物群系调整）
- [ ] 技能树UI界面
- [ ] 任务系统和日志

#### 中期（1-2个月）
- [ ] 瓦片图地图集成（Wang Tileset）
- [ ] 魔法融合系统
- [ ] 装备系统
- [ ] 音效和音乐
- [ ] 昼夜循环和动态天气

---

## 📁 文档管理规则 ⭐⭐⭐

### 1. 文档位置规范

**强制规则**：
```
✅ docs/              ← 所有永久文档
✅ docs/测试/         ← 临时测试文档（完成后删除）
✅ 根目录/README.md   ← 唯一例外
❌ 根目录其他MD       ← 禁止
❌ src/ 目录MD        ← 禁止
```

**文档结构**：
```
docs/
├── README.md                    # 文档索引
├── 游戏设计文档.md              # 游戏设计
├── 技术架构文档.md              # 技术架构
├── 功能特性列表.md              # 功能清单
├── 开发路线图.md                # 开发计划
├── 已完成功能总结.md            # 完成状态
├── 更新日志.md                  # 版本历史
├── 地图系统增强说明.md          # 功能说明
├── 村庄系统v2实现说明.md        # 功能说明
└── 测试/                        # 临时测试（完成即删除）
```

### 2. 文档命名规范

**规范**：
- 使用中文名称（项目是中文游戏）
- 清晰描述内容
- 避免缩写和代码风格

**示例**：
```
✅ 好的命名：
- docs/数据持久化说明.md
- docs/敌人系统实现.md
- docs/测试/战斗系统测试.md

❌ 不好的命名：
- data-persist.md
- enemy_sys.md
- test123.md
```

### 3. 测试文档清理规则 ⭐⭐⭐

**流程**：
```
1. 功能开发 → 创建 docs/测试/xxx测试.md
2. 功能完成 → 测试验证
3. 测试通过 → 更新主文档
4. 删除测试文档 → 保持清洁 ⚠️
```

**判断标准**：
- ✅ 功能已完全实现
- ✅ 功能已测试通过
- ✅ 功能已整合到主文档

---

## 🔄 代码更新规则 ⭐⭐⭐

### 1. 必须更新旧代码，不要创建重复

**检查清单**：
- [ ] 是否有同名文件？→ 更新而非新建
- [ ] 是否有相似功能？→ 整合而非重复
- [ ] 是否有冲突逻辑？→ 重构统一
- [ ] 是否影响其他模块？→ 同步更新

**示例**：
```typescript
❌ 错误：创建 Player2.ts, EnemyNew.ts
✅ 正确：更新 Player.ts, Enemy.ts
```

### 2. 代码变更必须更新文档

**每次代码变更后，必须更新**：
1. `docs/已完成功能总结.md` - 标记完成状态
2. `docs/更新日志.md` - 记录版本变更
3. `docs/README.md` - 更新文档索引
4. 删除已完成功能的测试文档

---

## 📝 标准开发流程

### 新功能开发
```
1. 接收任务
   ↓
2. 检查是否有旧代码/文档需要更新 ⚠️
   ↓
3. 更新/创建代码（不要重复）
   ↓
4. 更新相关文档（已完成、计划、日志）⚠️
   ↓
5. 创建测试文档（如需要）→ docs/测试/
   ↓
6. 测试验证
   ↓
7. 删除测试文档（功能完成后）⚠️
   ↓
8. 提交代码
```

### 提交前检查清单
```bash
# 1. 检查根目录是否有多余MD文档
ls *.md | grep -v README.md
# 应该没有输出

# 2. 检查是否更新了主文档
git diff docs/已完成功能总结.md
git diff docs/更新日志.md
git diff docs/README.md

# 3. 检查测试文档是否需要删除
ls docs/测试/
# 如果功能已完成，删除对应测试文档
```

---

## 📚 文档导航

### 🎮 游戏设计文档

| 文件 | 内容 | 适合对象 |
|------|------|---------|
| **游戏设计文档.md** | 世界观、玩法系统、成长机制、叙事设计 | 全体团队、投资人 |
| **优化建议汇总.md** | 5大创新机制、功能优先级矩阵 | 设计师、制作人 |
| **视觉设计指南.md** | 像素规格、色彩方案、角色设计、UI规范 | 美术、UI设计师 |
| **功能特性列表.md** | 160+功能清单、优先级、难度评估 | 全体团队 |

### 💻 技术开发文档

| 文件 | 内容 | 适合对象 |
|------|------|---------|
| **技术架构文档.md** | 技术栈、项目结构、核心系统架构（15000字） | 程序员、技术负责人 |
| **快速开始指南.md** | 如何运行项目、操作说明、常见问题 | 所有开发者 |

### 📊 项目管理文档

| 文件 | 内容 | 适合对象 |
|------|------|---------|
| **开发路线图.md** | 4阶段开发计划（10-13个月）、资源估算 | 项目经理、制作人 |
| **已完成功能总结.md** | 当前完成状态、功能清单 | 全体团队 |
| **更新日志.md** | 版本历史、变更记录 | 全体团队 |

### 🔧 规则文件（.cursor/rules/）

| 文件 | 用途 |
|------|------|
| `project-overview-rules.mdc` | 本文件 - 项目全局规则 ⭐⭐⭐ |
| `game-design-rules.mdc` | 游戏设计原则与禁忌 |
| `tech-architecture-rules.mdc` | 代码规范与技术标准 |
| `background-rules.mdc` | 项目背景与索引 |

---

## 👥 根据角色的阅读指南

### 💻 程序员（新手）
1. 本文件（project-overview-rules.mdc）- 项目概览
2. 快速开始指南.md - 环境搭建
3. tech-architecture-rules.mdc - 技术规范
4. 技术架构文档.md - 系统架构
5. game-design-rules.mdc - 理解设计意图

### 💻 程序员（有经验）
1. tech-architecture-rules.mdc - 快速了解技术栈和规范
2. 本文件（project-overview-rules.mdc）- 项目状态和规则
3. 技术架构文档.md - 深入了解架构
4. game-design-rules.mdc - 理解游戏设计

### 🎮 游戏设计师
1. game-design-rules.mdc - 设计规则
2. 游戏设计文档.md - 完整设计
3. 优化建议汇总.md - 创新点和优化方案
4. 功能特性列表.md - 功能优先级

### 🤖 AI助手（Windsurf）
1. **本文件（project-overview-rules.mdc）** - 全局规则 ⭐⭐⭐
2. game-design-rules.mdc - 设计规则
3. tech-architecture-rules.mdc - 技术规则
4. 根据具体需求查阅详细文档

---

## ⚠️ 重要原则

### 1. 文档即代码
- 文档和代码同等重要
- 文档过期等于技术债务
- 及时更新是最佳实践

### 2. 一个功能，一个文档
- 不要为同一个功能创建多个文档
- 功能完成后合并到主文档

### 3. 保持清洁
- 代码变了 → 文档要更新
- 功能完成 → 测试文档要删除
- 根目录只保留README.md

### 4. 避免重复
- 检查旧代码 → 更新而非创建
- 检查旧文档 → 整合而非重复

---

## 📋 快速参考

### 文档存放位置

| 文档类型 | 存放位置 | 是否删除 |
|---------|---------|---------|
| 设计文档 | docs/ | 永久保留 |
| 技术文档 | docs/ | 长期保留 |
| 系统说明 | docs/ | 长期保留 |
| 测试文档 | docs/测试/ | 完成后删除 ⚠️ |
| 项目README | 根目录/ | 永久保留 |

### 需要更新的文档

| 场景 | 需要更新的文档 |
|-----|--------------|
| 新功能开发 | 已完成总结 + 更新日志 + README |
| Bug修复 | 更新日志 |
| 代码重构 | 技术架构文档 + 更新日志 |
| 功能完成 | 删除测试文档 + 更新主文档 |

---

## 🎯 项目愿景

**"在迷雾中，每一步都是勇气；在黑暗中，每一光都是希望。"**

我们要创造的不只是一个游戏，而是一段关于记忆、希望和重生的旅程。

让玩家在完成游戏后感受到：
- ✨ 从弱小到强大的成长满足
- ✨ 驱散迷雾时拯救世界的成就感
- ✨ 拼凑故事时的情感共鸣
- ✨ 村庄繁荣时的温暖归属感
- ✨ 探索发现时的惊喜与好奇

---

## 📊 项目统计

### 技术栈
| 技术 | 版本 | 用途 |
|------|------|------|
| Vite | 5.0.8 | 构建工具 |
| Phaser | 3.80.1 | 游戏引擎 |
| React | 18.2.0 | UI框架 |
| TypeScript | 5.3.3 | 开发语言 |
| Zustand | 4.4.7 | 状态管理 |
| TailwindCSS | 3.4.0 | 样式方案 |

### 文档统计
| 类型 | 文件数 | 说明 |
|------|--------|------|
| 规则文件（.mdc） | 4 | AI和开发者必读 |
| 设计文档（.md） | 4 | 游戏设计相关 |
| 技术文档（.md） | 8 | 技术实现相关 |
| 管理文档（.md） | 3 | 项目管理相关 |

---

## ✅ 执行清单

### 开始开发前
- [ ] 阅读本文件（project-overview-rules.mdc）
- [ ] 阅读 game-design-rules.mdc
- [ ] 阅读 tech-architecture-rules.mdc
- [ ] 环境搭建（参考快速开始指南.md）

### 开发功能时
- [ ] 检查是否有旧代码需要更新
- [ ] 检查是否有旧文档需要更新
- [ ] 遵循技术架构文档.md的系统设计
- [ ] 符合tech-architecture-rules.mdc的代码规范

### 完成功能后
- [ ] 更新 docs/已完成功能总结.md
- [ ] 更新 docs/更新日志.md
- [ ] 更新 docs/README.md
- [ ] 删除测试文档（如有）
- [ ] 清理根目录多余文档

### 提交代码前
- [ ] TypeScript类型无错误
- [ ] ESLint无警告
- [ ] 测试通过
- [ ] 文档已更新
- [ ] 符合代码规范

---

**遵守这些规则，让项目文档和代码一样优雅！** 📝✨🚀

**版本**: v0.4.0  
**更新时间**: 2025-10-21  
**维护者**: 项目团队

---

## 🆕 v0.4.0 更新亮点

### 1. 像素化UI系统 ⭐⭐⭐
- 完全像素风格HUD（方形边框、monospace字体）
- 升级改为头顶飘字显示
- 属性分配面板像素化
- 技能栏和快捷键提示像素化

### 2. 大地图系统 ⭐⭐⭐
- 10倍世界大小（10000x10000）
- 动态分块加载（ChunkManager）
- 生物群系系统（平原、森林、沙漠、山地）
- 智能敌人生成（根据距离调整数量）
- 性能优化（稀疏瓦片、透明度）

### 3. Chibi角色系统 ⭐⭐
- 新增Chibi英雄（头大腿短）
- 新增骷髅战士敌人
- 新增哥布林战士敌人
- 所有角色8方向精灵图

### 4. 性能监控工具 ⭐
- F3切换性能显示
- 实时FPS、Chunks、敌人数量
- 像素风格UI

### 5. 等级成长系统 ⭐⭐
- 3选1属性分配
- 权重系统（基础60%、特殊30%、高级10%）
- 成长历史记录
- 像素风格UI

**参考文档**:
- `UPDATE_SUMMARY.md` - Chibi角色更新
- `UI_MAP_UPDATE.md` - UI优化和地图概述
- `CHUNK_SYSTEM_COMPLETE.md` - 大地图系统完整文档
